/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ssi.holiday.service.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.ssi.holiday.service.model.Holiday;
import com.ssi.holiday.service.model.HolidayModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Holiday service. Represents a row in the &quot;ssi_holiday&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link HolidayModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HolidayImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see HolidayImpl
 * @see Holiday
 * @see HolidayModel
 * @generated
 */
@ProviderType
public class HolidayModelImpl extends BaseModelImpl<Holiday>
	implements HolidayModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a holiday model instance should use the {@link Holiday} interface instead.
	 */
	public static final String TABLE_NAME = "ssi_holiday";
	public static final Object[][] TABLE_COLUMNS = {
			{ "holidayId", Types.INTEGER },
			{ "holidayName", Types.VARCHAR },
			{ "holidayDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("holidayId", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("holidayName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("holidayDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table ssi_holiday (holidayId INTEGER not null primary key,holidayName VARCHAR(75) null,holidayDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table ssi_holiday";
	public static final String ORDER_BY_JPQL = " ORDER BY holiday.holidayId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ssi_holiday.holidayId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.ssi.holiday.service.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ssi.holiday.service.model.Holiday"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.ssi.holiday.service.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ssi.holiday.service.model.Holiday"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.ssi.holiday.service.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ssi.holiday.service.model.Holiday"),
			true);
	public static final long HOLIDAYDATE_COLUMN_BITMASK = 1L;
	public static final long HOLIDAYID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.ssi.holiday.service.service.util.ServiceProps.get(
				"lock.expiration.time.com.ssi.holiday.service.model.Holiday"));

	public HolidayModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _holidayId;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setHolidayId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _holidayId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Holiday.class;
	}

	@Override
	public String getModelClassName() {
		return Holiday.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("holidayId", getHolidayId());
		attributes.put("holidayName", getHolidayName());
		attributes.put("holidayDate", getHolidayDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer holidayId = (Integer)attributes.get("holidayId");

		if (holidayId != null) {
			setHolidayId(holidayId);
		}

		String holidayName = (String)attributes.get("holidayName");

		if (holidayName != null) {
			setHolidayName(holidayName);
		}

		Date holidayDate = (Date)attributes.get("holidayDate");

		if (holidayDate != null) {
			setHolidayDate(holidayDate);
		}
	}

	@Override
	public int getHolidayId() {
		return _holidayId;
	}

	@Override
	public void setHolidayId(int holidayId) {
		_holidayId = holidayId;
	}

	@Override
	public String getHolidayName() {
		if (_holidayName == null) {
			return StringPool.BLANK;
		}
		else {
			return _holidayName;
		}
	}

	@Override
	public void setHolidayName(String holidayName) {
		_holidayName = holidayName;
	}

	@Override
	public Date getHolidayDate() {
		return _holidayDate;
	}

	@Override
	public void setHolidayDate(Date holidayDate) {
		_columnBitmask |= HOLIDAYDATE_COLUMN_BITMASK;

		if (_originalHolidayDate == null) {
			_originalHolidayDate = _holidayDate;
		}

		_holidayDate = holidayDate;
	}

	public Date getOriginalHolidayDate() {
		return _originalHolidayDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Holiday toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Holiday)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		HolidayImpl holidayImpl = new HolidayImpl();

		holidayImpl.setHolidayId(getHolidayId());
		holidayImpl.setHolidayName(getHolidayName());
		holidayImpl.setHolidayDate(getHolidayDate());

		holidayImpl.resetOriginalValues();

		return holidayImpl;
	}

	@Override
	public int compareTo(Holiday holiday) {
		int primaryKey = holiday.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Holiday)) {
			return false;
		}

		Holiday holiday = (Holiday)obj;

		int primaryKey = holiday.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		HolidayModelImpl holidayModelImpl = this;

		holidayModelImpl._originalHolidayDate = holidayModelImpl._holidayDate;

		holidayModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Holiday> toCacheModel() {
		HolidayCacheModel holidayCacheModel = new HolidayCacheModel();

		holidayCacheModel.holidayId = getHolidayId();

		holidayCacheModel.holidayName = getHolidayName();

		String holidayName = holidayCacheModel.holidayName;

		if ((holidayName != null) && (holidayName.length() == 0)) {
			holidayCacheModel.holidayName = null;
		}

		Date holidayDate = getHolidayDate();

		if (holidayDate != null) {
			holidayCacheModel.holidayDate = holidayDate.getTime();
		}
		else {
			holidayCacheModel.holidayDate = Long.MIN_VALUE;
		}

		return holidayCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{holidayId=");
		sb.append(getHolidayId());
		sb.append(", holidayName=");
		sb.append(getHolidayName());
		sb.append(", holidayDate=");
		sb.append(getHolidayDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.ssi.holiday.service.model.Holiday");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>holidayId</column-name><column-value><![CDATA[");
		sb.append(getHolidayId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>holidayName</column-name><column-value><![CDATA[");
		sb.append(getHolidayName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>holidayDate</column-name><column-value><![CDATA[");
		sb.append(getHolidayDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Holiday.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Holiday.class
		};
	private int _holidayId;
	private String _holidayName;
	private Date _holidayDate;
	private Date _originalHolidayDate;
	private long _columnBitmask;
	private Holiday _escapedModel;
}